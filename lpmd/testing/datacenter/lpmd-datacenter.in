#!/usr/bin/env python

import sys, copy

DATACENTER_PLUGINPATH = '@prefix@/lib/lpmd'
VERSION = '0.5.3beta2'

#
#
#
class ManipulationLibrary:

  def condreducer(self, x):
      try: return int(x)
      except:
        try: return float(x)
        except: return x

  def condformatter(self, x):
      try: return ('%8.8f' % x).ljust(12)
      except: 
        try: return ('%d' % x).ljust(12)
        except: return ('%s' % x).ljust(12)

#
#
#
class DataCenter(ManipulationLibrary):

  class DataCenterException(Exception): pass

  class MissingArgument(DataCenterException):
      def __init__(self, plugname, misarg): self.plugin, self.arg = plugname, misarg
      def __str__(self): return ("[Error] (in plugin %s): Missing argument: \"%s\"" % (self.plugin, self.arg))

  class MissingTag(DataCenterException):
      def __init__(self, plugname, tag): self.plugin, self.tag = plugname, tag
      def __str__(self): return ("[Error] (in plugin %s): Missing tag: \"%s\"" % (self.plugin, self.tag))

  class WrongFormat(DataCenterException):
      def __init__(self, plugname, msg): self.plugin, self.msg = plugname, msg
      def __str__(self): return ("[Error] (in plugin %s): %s" % (self.plugin, self.msg))

  def __init__(self): self.ClearData()

  def ClearData(self): self.data = []

  def LoadPlugin(self, name, args={}):
      oldsyspath = sys.path
      sys.path = [ DATACENTER_PLUGINPATH ]
      mod = __import__('dc_'+name)
      sys.path = oldsyspath
      try:
        p = mod.pluginLoader(self, args)
        p.dc = self
        return p
      except Exception, x: raise x

  def ReadFile(self, pluginname, path, args={}):
      plug = self.LoadPlugin(pluginname, args)
      f = open(path, 'r')
      plug.ReadHeader(f)
      for config in plug.ReadMany(f): self.data.append(config)
      f.close()
 
  def WriteFile(self, pluginname, path, args={}):
      plug = self.LoadPlugin(pluginname, args)
      f = open(path, 'w')
      plug.WriteHeader(f)
      plug.WriteMany(f, self.data)
      f.close()

  def DoAction(self, action):
      if action[0] == 'read': self.ReadFile(action[1], action[2]['file'], action[2])
      elif action[0] == 'write': self.WriteFile(action[1], action[2]['file'], action[2])

#
#
#
def ParseKeywordArgs(arglist):
    kw = {}
    defkw = ['file']
    lspl = [x.strip() for x in arglist.split(',')]
    for i in range(0, len(lspl)): 
        x = lspl.pop(0)
        if not '=' in x: 
           if len(defkw) == 0: raise Exception('Syntax Error')
           kw[defkw.pop(0)] = x.split('=')[0].strip()
        else: kw[x.split('=')[0].strip()] = x.split('=')[1].strip()
    return kw

#
# main program
#
if __name__ == '__main__':
   #                               mini getopt :)
   actions = []
   argvs = copy.deepcopy(sys.argv)
   argvs.pop(0)
   while True:
         if len(argvs) == 0: break
         arg = argvs.pop(0)
         if arg == '-i' or arg == '--input':
            options = argvs.pop(0)
            modname, arglist = options.split(':')[0], options.split(':')[1]
            actions.append(('read', modname, ParseKeywordArgs(arglist)))
         elif arg == '-o' or arg == '--output':
            options = argvs.pop(0)
            modname, arglist = options.split(':')[0], options.split(':')[1]
            actions.append(('write', modname, ParseKeywordArgs(arglist)))
         elif arg == '-p':
            pluginname = argvs.pop(0)
            dc = DataCenter()
            try:
              plug = dc.LoadPlugin(pluginname, {'showmode': True})
              plug.Show()
            except Exception, e: print e 
            sys.exit(0)

   #                            executes every action defined in the options 
   dc = DataCenter() 
   if len(actions) == 0:
      print "LPMD Datacenter version ", VERSION
      print "\nUsage: lpmd-datacenter [--input | -i plugin:opt1,opt2,...] [--output | -o plugin:opt1,opt2,...]"
      print "       lpmd-datacenter -h"
      sys.exit(1)
   else:
      try:
        for action in [x for x in actions if x[0] == 'read']: dc.DoAction(action)
        for action in [x for x in actions if x[0] == 'write']: dc.DoAction(action)
      except Exception, e: print e

